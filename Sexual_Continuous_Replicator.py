#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Last update, 16/01/2018
Continuous Replicator Dynamic in Sexual model
@author: Shota Shibasaki
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

#parameter
a1=1
b1=1.2
e1=0.0001
a2=0.6
b2=1.2
e2=0.0001
theta=0.9#prob of macrocyst formation between mating types
h=0.5
e0=0.000001
def Matrix(a2,b2,theta):
   """
   Defining patoff matrixes
   A1: payoff matrix for fruiting body formation
   A2: payoff matrix for macrocyst formation
   A: patoff matrix generated by the mixture of A1 and A2.
      see Eq [2] in the main text for more detail.
   Parameters
   a2: benefit of cmutual ooperation in macrocyst formation
   b2: benefit of exploitation for defectors in macrocyst formation
   theta: prob. of macrocyst fromation
      
   """
   A1=np.array([[a1,h*a1,0],\
                 [e0,e0,e0],\
                 [b1,h*e1,e1]])
    
   A2=np.array([[a2,0,a2],\
                 [b2,e2,b2],\
                 [a2,0,a2]])
   A=(1-theta)*A1+(theta)*A2
   return A

def func(x, t, a2,b2,theta):
    """
    Continuous replicator dynamics
    x: array of the frequency of the three strategy
    t: time
    a2, b2, theta: defined in function Matrix
    """
    #x is array and A is matrix
    Aa=Matrix(a2,b2,0)#payoff matrix within mating types
    As=Matrix(a2,b2,theta)#payoff matrix between mating types
    A1=np.c_[Aa,As]#extend column
    A2=np.c_[As,Aa]
    A=np.r_[A1,A2]#cmplete payoff matrix
    phi=np.dot(x,A)
    phi=np.dot(phi,x.T)#mean fitness in the population
    #calculate replicator dynamics
    f0=np.dot(A[0,:],x.T)-phi#C1
    f1=np.dot(A[1,:],x.T)-phi#DM1
    f2=np.dot(A[2,:],x.T)-phi#DF1 
    f3=np.dot(A[3,:],x.T)-phi#C2
    f4=np.dot(A[4,:],x.T)-phi#DM2
    f5=np.dot(A[5,:],x.T)-phi#DF2 
    f=np.array([x[0]*f0,x[1]*f1,x[2]*f2,x[3]*f3,x[4]*f4,x[5]*f5])
    
    return(f)

def triplot(sol,col):
    """
    Mapping the phase space into the triangl plain
    C1+C2, DF1+DF2, DM1+DM2
    """
    TP=np.array([1/2,np.sqrt(3)/2])#C
    LS=np.array([0,0])#D_M
    RS=np.array([1,0])#D_F
    orbX=(sol[:,0]+sol[:,3])*TP[0]+(sol[:,1]+sol[:,4])*LS[0]+(sol[:,2]+sol[:,5])*RS[0]
    orbY=(sol[:,0]+sol[:,3])*TP[1]+(sol[:,1]+sol[:,4])*LS[1]+(sol[:,2]+sol[:,5])*RS[1]
    #plot the dynamics
    plt.xlim(-0.2,1.2)
    plt.ylim(-0.1,1.2*TP[1])
    plt.plot([LS[0],TP[0]],[LS[1],TP[1]],linewidth=4,color="k")
    plt.plot([RS[0],TP[0]],[RS[1],TP[1]],linewidth=4,color="k")
    plt.plot([RS[0],LS[0]],[RS[1],LS[1]],linewidth=4,color="k")
    plt.text(-0.35,0,'$D_1^M+D_2^M$',fontsize=20,)
    plt.text(1.05,0,'$D_1^F+D_2^F$',fontsize=20,)
    plt.text(0.365,0.9,'$C_1+C_2$',fontsize=20,)
    plt.plot(orbX,orbY,linewidth=2,color=col)
    plt.tick_params(labelbottom='off',labelleft="off")

def main():
    """
    Simulate the continuous replicator dymnamics in sexual model
    from the three different initial conditions
    """
    T=1000#end the simulation at T
    
    init=np.array([10,1,1,10,1,1])#iniital condition 1
    init=init/sum(init)
    t=np.linspace(0,T,100*T+1)
    sol=odeint(func, init, t, args=(a2,b2,theta))
    triplot(sol,"c")
    
    init=np.array([1,10,1,1,10,1])#initial condition 2
    init=init/sum(init)
    t=np.linspace(0,T,100*T+1)
    sol=odeint(func, init, t, args=(a2,b2,theta))
    triplot(sol,"m")

    init=np.array([1,1,10,1,1,10]) # initial condition 3
    #init=np.array([1,1,10.1,1,1,10]) # initial condition 4
    #initial condition 4: sex ratio is NOT 1:1
    init=init/sum(init)
    t=np.linspace(0,T,500*T+1)
    sol=odeint(func, init, t, args=(a2,b2,theta)) 
    triplot(sol,"y")
    
    """
    #plot the interior point G if the inital sex ratio is 1:1
    GX=(sol[-1,0]+sol[-1,3])*0.5+(sol[-1,1]+sol[-1,4])*0+(sol[-1,2]+sol[-1,5])*1
    GY=(sol[-1,0]+sol[-1,3])*np.sqrt(3)/2
    #plt.plot(GX,GY,'k*',markersize=15)
    #plt.text(GX+0.05,GY,'G',fontsize=20)
    print(GX,GY)
    """
    #plot the phase space
    plt.savefig("Cont_rep_sexual.pdf")
    plt.show()
    #plot the evolutionary dynamics of last simulation
    plt.plot(t,sol[:,0],linewidth=3,color="c",linestyle="-",label='$C_1$')
    plt.plot(t,sol[:,2],linewidth=3,color="y",linestyle="-",label='$D_1^F$')
    plt.plot(t,sol[:,1],linewidth=3,color="m",linestyle="-",label='$D_1^M$')
    plt.plot(t,sol[:,3],linewidth=3,color="c",linestyle="--",label='$C_2$')
    plt.plot(t,sol[:,5],linewidth=3,color="y",linestyle="--",label='$D_2^F$')
    plt.plot(t,sol[:,4],linewidth=3,color="m",linestyle="--",label='$D_2^M$')
    plt.xlim(0,  T* 1.1)
    plt.ylim(0., 1.1)
    plt.xlabel("time", fontsize=15)
    plt.ylabel("frequency",fontsize=15)
    plt.legend(loc="upper left",fontsize=14)
    plt.savefig("Cont_rep_sexual_dynamics.pdf")
    plt.show()
if __name__ == '__main__':
    main()    
    